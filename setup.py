#! /usr/bin/python
import os, stat

def create_test_file():
  fileformat = '''
/*
 * THIS FILE IS AUTOGENERATED
 * MODIFY setup.py INSTEAD
*/
#include "vge.h"
void expect(int result, char *errormsg)
{{
  if(!result) {{
    printf("%s\\n", errormsg);
  }}
}}
{declarations}
void run_test(const char *name, void (*test)(), const char *pattern) {{
  struct vge_stopwatch sw;
  float time_elapsed;
  vge_stopwatch_reset(&sw);
  if (pattern != NULL && strstr(name, pattern) == NULL) {{
    printf("Skipping %s\\n", name);
    return;
  }}
  test();
  time_elapsed = vge_stopwatch_elapsed(&sw);
  printf("Ran %s in %2.3f\\n", name, time_elapsed);
}}
void run_tests(const char *pattern)
{{
  struct vge_stopwatch sw;
  float time_elapsed;
  vge_stopwatch_reset(&sw);
{calls}
  time_elapsed = vge_stopwatch_elapsed(&sw);
  printf("Ran {count} tests in %2.3f\\n", time_elapsed);
}}
int main(int argc, char **argv)
{{
  if(argc > 1 && strcmp(argv[1], "test") == 0) {{
    run_tests(argv[2]);
  }} else {{
    printf("Running game_main()...\\n");
    game_main(argc, argv);
  }}
  return 0;
}}
'''
  callformat='  run_test("{f}", {f}, pattern);\n'
  functions = [f for f in all_functions()]
  declarations = ''
  calls = ''
  for f in functions:
    declarations += 'void ' + f + '();\n'
    calls += callformat.format(f=f)
  tests = open('tests.c', 'w')
  tests.write(fileformat.format(declarations=declarations, calls=calls, count=len(functions)))

def all_c_files(path='./tests'):
  files = os.listdir(path)
  for f in files:
    fpath = os.path.join(path, f)
    st_mode = os.stat(fpath).st_mode
    if stat.S_ISDIR(st_mode):
      for cf in all_c_files(fpath):
        yield cf
    elif stat.S_ISREG(st_mode) and f[-2:] == '.c':
      yield fpath
  raise StopIteration

def all_functions(path='./tests'):
  for f in all_c_files(path):
    fp = open(f, 'r')
    for l in fp:
      if l[:7] == 'VGETEST':
        yield l[8:-3]
  raise StopIteration

create_test_file()
